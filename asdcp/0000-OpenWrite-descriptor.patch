--- a/src/AS_DCP.h	2021-01-08 01:22:34.223699582 +0300
+++ b/src/AS_DCP.h	2021-01-05 09:47:10.985487665 +0300
@@ -146,6 +146,9 @@
 // All library components are defined in the namespace ASDCP
 //
 namespace ASDCP {
+    namespace MXF {
+        class RGBAEssenceDescriptor;
+    }
   //
   // The version number declaration and explanation have moved to ../configure.ac
   const char* Version();
@@ -1262,6 +1265,13 @@
 	  Result_t OpenWrite(const std::string& filename, const WriterInfo&,
 			     const PictureDescriptor&, ui32_t HeaderSize = 16384);
 
+      // Open the file for writing. The file must not exist. Returns error if
+	  // the operation cannot be completed or if nonsensical data is discovered
+	  // in the essence descriptor.
+	  Result_t OpenWriteCustom(const std::string& filename, const WriterInfo&,
+			     const PictureDescriptor&, ui32_t HeaderSize = 16384,
+			     ASDCP::MXF::RGBAEssenceDescriptor *rgbaDesc = NULL);
+
 	  // Writes a frame of essence to the MXF file. If the optional AESEncContext
 	  // argument is present, the essence is encrypted prior to writing.
 	  // Fails if the file is not open, is finalized, or an operating system
--- a/src/AS_DCP_JP2K.cpp	2021-01-08 01:22:34.223699582 +0300
+++ b/src/AS_DCP_JP2K.cpp	2021-01-05 10:03:34.769981010 +0300
@@ -1145,6 +1145,8 @@
   lh__Writer(const Dictionary& d) : ASDCP::h__ASDCPWriter(d), m_EssenceSubDescriptor(0) {
     memset(m_EssenceUL, 0, SMPTE_UL_LENGTH);
   }
+  
+  void     EssenceDescriptorSetup(ASDCP::MXF::RGBAEssenceDescriptor *rgbaDesc);
 
   virtual ~lh__Writer(){}
 
@@ -1155,6 +1157,28 @@
   Result_t Finalize();
 };
 
+void
+lh__Writer::EssenceDescriptorSetup(ASDCP::MXF::RGBAEssenceDescriptor *rgbaDesc)
+{
+  RGBAEssenceDescriptor* tmp_rgba = new RGBAEssenceDescriptor(m_Dict);
+
+  if (rgbaDesc == NULL) {
+    tmp_rgba->ComponentMaxRef = 4095;
+    tmp_rgba->ComponentMinRef = 0;
+  } else {
+    tmp_rgba->CodingEquations = UL(rgbaDesc->CodingEquations);
+    tmp_rgba->TransferCharacteristic = UL(rgbaDesc->TransferCharacteristic);
+    tmp_rgba->ColorPrimaries = UL(rgbaDesc->ColorPrimaries);
+    tmp_rgba->PictureEssenceCoding = UL(rgbaDesc->ColorPrimaries);
+    tmp_rgba->ComponentMaxRef = rgbaDesc->ComponentMaxRef;
+    tmp_rgba->ComponentMinRef = rgbaDesc->ComponentMinRef;
+    tmp_rgba->MasteringDisplayMinimumLuminance = rgbaDesc->MasteringDisplayMinimumLuminance;
+    tmp_rgba->MasteringDisplayMaximumLuminance = rgbaDesc->MasteringDisplayMaximumLuminance;
+  }
+
+  m_EssenceDescriptor = tmp_rgba;
+}
+
 // Open the file for writing. The file must not exist. Returns error if
 // the operation cannot be completed.
 ASDCP::Result_t
@@ -1168,11 +1192,9 @@
   if ( ASDCP_SUCCESS(result) )
     {
       m_HeaderSize = HeaderSize;
-      RGBAEssenceDescriptor* tmp_rgba = new RGBAEssenceDescriptor(m_Dict);
-      tmp_rgba->ComponentMaxRef = 4095;
-      tmp_rgba->ComponentMinRef = 0;
+      if (m_EssenceDescriptor == NULL)
+        EssenceDescriptorSetup(NULL);
 
-      m_EssenceDescriptor = tmp_rgba;
       m_EssenceSubDescriptor = new JPEG2000PictureSubDescriptor(m_Dict);
       m_EssenceSubDescriptorList.push_back((InterchangeObject*)m_EssenceSubDescriptor);
 
@@ -1359,6 +1381,7 @@
 ASDCP::JP2K::MXFWriter::OpenWrite(const std::string& filename, const WriterInfo& Info,
 				  const PictureDescriptor& PDesc, ui32_t HeaderSize)
 {
+#if 0
   if ( Info.LabelSetType == LS_MXF_SMPTE )
     m_Writer = new h__Writer(DefaultSMPTEDict());
   else
@@ -1375,8 +1398,37 @@
     m_Writer.release();
 
   return result;
+#else
+  return OpenWriteCustom(filename, Info, PDesc, HeaderSize, NULL);
+#endif
 }
 
+// Open the file for writing. The file must not exist. Returns error if
+// the operation cannot be completed.
+ASDCP::Result_t
+ASDCP::JP2K::MXFWriter::OpenWriteCustom(const std::string& filename, const WriterInfo& Info,
+				  const PictureDescriptor& PDesc, ui32_t HeaderSize,
+				  ASDCP::MXF::RGBAEssenceDescriptor *rgbaDesc)
+{
+  if ( Info.LabelSetType == LS_MXF_SMPTE )
+    m_Writer = new h__Writer(DefaultSMPTEDict());
+  else
+    m_Writer = new h__Writer(DefaultInteropDict());
+
+  m_Writer->m_Info = Info;
+
+  m_Writer->EssenceDescriptorSetup(rgbaDesc);
+
+  Result_t result = m_Writer->OpenWrite(filename, ASDCP::ESS_JPEG_2000, HeaderSize);
+
+  if ( ASDCP_SUCCESS(result) )
+    result = m_Writer->SetSourceStream(PDesc, JP2K_PACKAGE_LABEL);
+
+  if ( ASDCP_FAILURE(result) )
+    m_Writer.release();
+
+  return result;
+}
 
 // Writes a frame of essence to the MXF file. If the optional AESEncContext
 // argument is present, the essence is encrypted prior to writing.
